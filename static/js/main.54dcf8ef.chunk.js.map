{"version":3,"sources":["Components/Navbar.js","Components/Textform.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","Title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","Textform","text","setText","useState","mystyle","setStyle","color","backgroundColor","btntext","setbtntext","Fragment","style","heading","value","onChange","event","target","rows","HandleUpClick","newtext","toUpperCase","showAlert","HandlelwClick","toLowerCase","Handlecleartext","Handlemodeclick","handleCopyText","copytext","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpaces","split","join","length","Alert","alert","word","lower","charAt","slice","capitalization","msg","App","setMode","setalert","message","setTimeout","togglemode","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.54dcf8ef.chunk.js","sourcesContent":["import React from 'react'\r\nimport propTypes from 'prop-types';\r\n// import {Link} from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar ${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className={`navbar-brand text-${props.mode==='light'? 'dark':'light'}`} href=\"#\">{props.Title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0 text-light\">\r\n              <li className=\"nav-item\">\r\n                <a className={`nav-link text-${props.mode==='light'? 'dark':'light'}`} aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className={`nav-link text-${props.mode==='light'? 'dark':'light'}`} href=\"#\">About</a>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\" role=\"search\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'? 'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n  Title: propTypes.string.isRequired                  //is required makes it required to pass title with <navbar />\r\n}\r\n// Navbar.defaultProps={\r\n//     Title:\"Set title\"                         //default prop value of \"title\" will be displayed if no title value will passed with <navbar/>\r\n// }                                                             \r\n","\r\nimport React, { useState } from \"react\";\r\nimport propTypes from 'prop-types';\r\n// import Alert from './Components/Alert';\r\n\r\nexport default function Textform(props) {\r\n    const HandleUpClick = () => {\r\n        //console.log(\"Uppercase was clicked\")\r\n        let newtext = text.toUpperCase()\r\n        setText(newtext)\r\n        props.showAlert(\"Text has been converted to uppercase\",\"success\")\r\n        // setText(\"This is new text\")\r\n    }\r\n    const HandlelwClick = () => {\r\n        //console.log(\"Uppercase was clicked\")\r\n        let newtext = text.toLowerCase()\r\n        setText(newtext)\r\n        props.showAlert(\"Text has been converted to Lowercase\",\"success\")\r\n        // setText(\"This is new text\")\r\n    }\r\n    const Handlecleartext = () => {\r\n        let newtext = \"\"\r\n        setText(newtext)\r\n        props.showAlert(\"Text has been Cleared\",\"success\")\r\n    }\r\n    const handleupchange = (event) => {\r\n        //console.log(\"changed\")                            //will run everytime whenever any change occur in textarea\r\n        setText(event.target.value)                         //set the text as default value of text + new value of text\r\n    }\r\n    const [text, setText] = useState(\"Enter the text\")            //setting state of text\r\n    // text=\"this is new text\"      //incorrect way to update text\r\n    // setText(\"This is new text\")//correct way to update text value\r\n        \r\n    const[mystyle,setStyle]=useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    })\r\n    const [btntext,setbtntext]=useState(\"Enable dark mode\")\r\n    const Handlemodeclick =()=>{\r\n        if(mystyle.backgroundColor==='white'){\r\n            setStyle({\r\n                color:'white',\r\n                backgroundColor:'grey'\r\n            })\r\n            setbtntext(\"Enable light mode\")\r\n            props.showAlert(\"Dark mode has been Enabled\",\"success\")\r\n        }\r\n        else{\r\n            setStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setbtntext(\"Enable dark mode\")\r\n            props.showAlert(\"Light mode has been Enabled\",\"success\")\r\n        }\r\n    }\r\n    const handleCopyText=()=>{\r\n        let copytext = document.getElementById(\"mybox\")\r\n        copytext.select();\r\n        navigator.clipboard.writeText(copytext.value)\r\n        props.showAlert(\"Text Copied\",\"Success\")\r\n    }\r\n    const handleExtraSpaces =()=>{\r\n        let newtext=text.split(/[ ]+/)\r\n        setText(newtext.join(\" \"))\r\n        props.showAlert(\"Extra spaces has been removed\",\"success\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"mb-3\">\r\n                    <h1 style={{color:props.mode==='dark'? 'white':'black'}}>{props.heading}</h1>\r\n                    <textarea className=\"form-control\" style={mystyle} value={text} onChange={handleupchange} id=\"mybox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <div>\r\n                    <button className=\"btn btn-primary mx-2\" onClick={HandleUpClick}>Convert to uppercase</button>   {/* mx-2 give space at x-axis */}\r\n                    <button className=\"btn btn-primary mx-2\" onClick={HandlelwClick}>Convert to lowercase</button>\r\n                    <button className=\"btn btn-primary mx-2\" onClick={Handlecleartext}>Clear Text</button>\r\n                    <button className=\"btn btn-primary mx-2\" onClick={Handlemodeclick}>{btntext}</button>\r\n                    <button className=\"btn btn-primary mx-2\" onClick={handleCopyText}>Copy Text</button>\r\n                    <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-2\" style={{color:props.mode==='light'? 'black':'white'}}>\r\n                <h2>Text Summary</h2>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008*text.split(\" \").length} minutes to read</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\n// import propTypes from 'prop-types';\r\n\r\nfunction Alert(props){\r\n    const capitalization=(word)=>{\r\n        let lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return(\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalization(props.alert.type)}</strong>:{props.alert.msg}\r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n      </div>\r\n    )\r\n}\r\nexport default Alert","import { useState } from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Textform from './Components/Textform';\nimport Alert from './Components/Alert';\n// import About from './Components/About';\nimport React from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   Link\n// } from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode] = useState('light');             //whether dark mode is enable or not\n  const togglemode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey'\n      showAlert(\"Dark mode is Enabled\", \"success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light mode is Enabled\", \"success\");\n    }\n  }\n  const [alert, setalert] = useState(null);\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setalert(null)\n    }, 1500);\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar Title=\"TextUtils\" mode={mode} toggleMode={togglemode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n        <Textform showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} />\n          {/* <Routes> */}\n            {/* <Route path=\"/about\" element={<About/>}/> */}\n            {/* <Route path=\"/home\" element={<Textform showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} />}/> */}\n            {/* <Route path=\"/textform\" element={<Textform showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} />}/> */}\n          {/* </Routes> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}